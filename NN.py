# -*- coding: utf-8 -*-
"""Untitled3.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/177SNeDW3rUcWvF0-fjxe_OpOtCiYCmNT
"""

import torch.nn as nn
import torch
import torchvision
from torch.utils.data import DataLoader
import torch.nn as nn
train_data = torchvision.datasets.CIFAR10(root = "./data" , train=True , transform = torchvision.transforms.ToTensor(),download = True)
test_data = torchvision.datasets.CIFAR10(root = "./testdata" , train=False , transform = torchvision.transforms.ToTensor(),download = True)

train_data_len = len(train_data)
test_data_len = len(test_data)
print("訓練集的長度 :{}".format(train_data_len))
print("測試集的長度 :{}".format(test_data_len))



class MyModel(nn.Module):
  def __init__(self) -> None:
    super(MyModel , self).__init__()
    self.Model = nn.Sequential(
        nn.Conv2d(3 , 32 , 5 , 1 , 2),
        nn.MaxPool2d(2),
        nn.Conv2d(32 , 32 , 5 , 1 , 2),
        nn.MaxPool2d(2),
        nn.Conv2d(32 , 64 , 5 , 1 , 2),
        nn.MaxPool2d(2),
        nn.Flatten(),
        nn.Linear(64*4*4,64),
        nn.Linear(64,10)
    )
  def forward(self , input):
    output = self.Model(input)
    return output

def train(model , train_data, lr , epoch):
  loss_fn = nn.CrossEntropyLoss()
  optimizer = torch.optim.Adam(model.parameters() , lr = lr)
  #dataloader
  dataloader = DataLoader(train_data , batch_size = 64 , shuffle=True)
  train_step = 0
  for epoch_num in range(epoch):
    print("第{}次訓練".format(epoch_num + 1))
    for data in dataloader:
      img , target = data
      output = model(img)
      loss_batch = loss_fn(output , target)
      optimizer.zero_grad()
      loss_batch.backward()
      optimizer.step()
      if(train_step % 100 == 0):
        print("訓練次數爲:{} , Loss:{}".format( train_step , loss_batch.item()))
      train_step += 1
def val(model , test_data):
  total_acc = 0
  dataloader = DataLoader(test_data , batch_size = 64 , shuffle=True)
  with torch.no_grad():
    for data in dataloader:
      img , target = data
      output = model(img)
      total_acc += (output.argmax(1) == target).sum().item()
    acc = total_acc / len(test_data)
    print("測試集正確率爲:{}%".format(acc * 100))


model = MyModel()
train(model , train_data , 1e-4 , 10)
val(model , test_data)